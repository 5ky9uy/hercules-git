// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/pb.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/pb.proto

It has these top-level messages:
	Metadata
	BurndownSparseMatrixRow
	BurndownSparseMatrix
	BurndownAnalysisResults
	CompressedSparseRowMatrix
	Couples
	TouchedFiles
	DeveloperTouchedFiles
	CouplesAnalysisResults
	UASTChange
	UASTChangesSaverResults
	AnalysisResults
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Metadata struct {
	// this format is versioned
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// complete command line used to write this message
	Cmdline string `protobuf:"bytes,2,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	// repository's name
	Repository string `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	// timestamp of the first analysed commit
	BeginUnixTime int64 `protobuf:"varint,4,opt,name=begin_unix_time,json=beginUnixTime,proto3" json:"begin_unix_time,omitempty"`
	// timestamp of the last analysed commit
	EndUnixTime int64 `protobuf:"varint,5,opt,name=end_unix_time,json=endUnixTime,proto3" json:"end_unix_time,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{0} }

func (m *Metadata) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Metadata) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

func (m *Metadata) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *Metadata) GetBeginUnixTime() int64 {
	if m != nil {
		return m.BeginUnixTime
	}
	return 0
}

func (m *Metadata) GetEndUnixTime() int64 {
	if m != nil {
		return m.EndUnixTime
	}
	return 0
}

type BurndownSparseMatrixRow struct {
	// the first `len(column)` elements are stored,
	// the rest `number_of_columns - len(column)` values are zeros
	Columns []uint32 `protobuf:"varint,1,rep,packed,name=columns" json:"columns,omitempty"`
}

func (m *BurndownSparseMatrixRow) Reset()                    { *m = BurndownSparseMatrixRow{} }
func (m *BurndownSparseMatrixRow) String() string            { return proto.CompactTextString(m) }
func (*BurndownSparseMatrixRow) ProtoMessage()               {}
func (*BurndownSparseMatrixRow) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{1} }

func (m *BurndownSparseMatrixRow) GetColumns() []uint32 {
	if m != nil {
		return m.Columns
	}
	return nil
}

type BurndownSparseMatrix struct {
	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NumberOfRows    int32  `protobuf:"varint,2,opt,name=number_of_rows,json=numberOfRows,proto3" json:"number_of_rows,omitempty"`
	NumberOfColumns int32  `protobuf:"varint,3,opt,name=number_of_columns,json=numberOfColumns,proto3" json:"number_of_columns,omitempty"`
	// `len(row)` matches `number_of_rows`
	Rows []*BurndownSparseMatrixRow `protobuf:"bytes,4,rep,name=rows" json:"rows,omitempty"`
}

func (m *BurndownSparseMatrix) Reset()                    { *m = BurndownSparseMatrix{} }
func (m *BurndownSparseMatrix) String() string            { return proto.CompactTextString(m) }
func (*BurndownSparseMatrix) ProtoMessage()               {}
func (*BurndownSparseMatrix) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{2} }

func (m *BurndownSparseMatrix) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BurndownSparseMatrix) GetNumberOfRows() int32 {
	if m != nil {
		return m.NumberOfRows
	}
	return 0
}

func (m *BurndownSparseMatrix) GetNumberOfColumns() int32 {
	if m != nil {
		return m.NumberOfColumns
	}
	return 0
}

func (m *BurndownSparseMatrix) GetRows() []*BurndownSparseMatrixRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

type BurndownAnalysisResults struct {
	// how many days are in each band [burndown_project, burndown_file, burndown_developer]
	Granularity int32 `protobuf:"varint,1,opt,name=granularity,proto3" json:"granularity,omitempty"`
	// how frequently we measure the state of each band [burndown_project, burndown_file, burndown_developer]
	Sampling int32 `protobuf:"varint,2,opt,name=sampling,proto3" json:"sampling,omitempty"`
	// always exists
	Project *BurndownSparseMatrix `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	// this is included if `-burndown-files` was specified
	Files []*BurndownSparseMatrix `protobuf:"bytes,4,rep,name=files" json:"files,omitempty"`
	// these two are included if `-burndown-people` was specified
	People []*BurndownSparseMatrix `protobuf:"bytes,5,rep,name=people" json:"people,omitempty"`
	// rows and cols order correspond to `burndown_developer`
	PeopleInteraction *CompressedSparseRowMatrix `protobuf:"bytes,6,opt,name=people_interaction,json=peopleInteraction" json:"people_interaction,omitempty"`
}

func (m *BurndownAnalysisResults) Reset()                    { *m = BurndownAnalysisResults{} }
func (m *BurndownAnalysisResults) String() string            { return proto.CompactTextString(m) }
func (*BurndownAnalysisResults) ProtoMessage()               {}
func (*BurndownAnalysisResults) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{3} }

func (m *BurndownAnalysisResults) GetGranularity() int32 {
	if m != nil {
		return m.Granularity
	}
	return 0
}

func (m *BurndownAnalysisResults) GetSampling() int32 {
	if m != nil {
		return m.Sampling
	}
	return 0
}

func (m *BurndownAnalysisResults) GetProject() *BurndownSparseMatrix {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *BurndownAnalysisResults) GetFiles() []*BurndownSparseMatrix {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *BurndownAnalysisResults) GetPeople() []*BurndownSparseMatrix {
	if m != nil {
		return m.People
	}
	return nil
}

func (m *BurndownAnalysisResults) GetPeopleInteraction() *CompressedSparseRowMatrix {
	if m != nil {
		return m.PeopleInteraction
	}
	return nil
}

type CompressedSparseRowMatrix struct {
	NumberOfRows    int32 `protobuf:"varint,1,opt,name=number_of_rows,json=numberOfRows,proto3" json:"number_of_rows,omitempty"`
	NumberOfColumns int32 `protobuf:"varint,2,opt,name=number_of_columns,json=numberOfColumns,proto3" json:"number_of_columns,omitempty"`
	// https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR.2C_CRS_or_Yale_format.29
	Data    []int64 `protobuf:"varint,3,rep,packed,name=data" json:"data,omitempty"`
	Indices []int32 `protobuf:"varint,4,rep,packed,name=indices" json:"indices,omitempty"`
	Indptr  []int64 `protobuf:"varint,5,rep,packed,name=indptr" json:"indptr,omitempty"`
}

func (m *CompressedSparseRowMatrix) Reset()                    { *m = CompressedSparseRowMatrix{} }
func (m *CompressedSparseRowMatrix) String() string            { return proto.CompactTextString(m) }
func (*CompressedSparseRowMatrix) ProtoMessage()               {}
func (*CompressedSparseRowMatrix) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{4} }

func (m *CompressedSparseRowMatrix) GetNumberOfRows() int32 {
	if m != nil {
		return m.NumberOfRows
	}
	return 0
}

func (m *CompressedSparseRowMatrix) GetNumberOfColumns() int32 {
	if m != nil {
		return m.NumberOfColumns
	}
	return 0
}

func (m *CompressedSparseRowMatrix) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CompressedSparseRowMatrix) GetIndices() []int32 {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *CompressedSparseRowMatrix) GetIndptr() []int64 {
	if m != nil {
		return m.Indptr
	}
	return nil
}

type Couples struct {
	// name of each `matrix`'s row and column
	Index []string `protobuf:"bytes,1,rep,name=index" json:"index,omitempty"`
	// is always square
	Matrix *CompressedSparseRowMatrix `protobuf:"bytes,2,opt,name=matrix" json:"matrix,omitempty"`
}

func (m *Couples) Reset()                    { *m = Couples{} }
func (m *Couples) String() string            { return proto.CompactTextString(m) }
func (*Couples) ProtoMessage()               {}
func (*Couples) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{5} }

func (m *Couples) GetIndex() []string {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Couples) GetMatrix() *CompressedSparseRowMatrix {
	if m != nil {
		return m.Matrix
	}
	return nil
}

type TouchedFiles struct {
	Files []int32 `protobuf:"varint,1,rep,packed,name=files" json:"files,omitempty"`
}

func (m *TouchedFiles) Reset()                    { *m = TouchedFiles{} }
func (m *TouchedFiles) String() string            { return proto.CompactTextString(m) }
func (*TouchedFiles) ProtoMessage()               {}
func (*TouchedFiles) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{6} }

func (m *TouchedFiles) GetFiles() []int32 {
	if m != nil {
		return m.Files
	}
	return nil
}

type DeveloperTouchedFiles struct {
	// order corresponds to `developer_couples::index`
	Developers []*TouchedFiles `protobuf:"bytes,1,rep,name=developers" json:"developers,omitempty"`
}

func (m *DeveloperTouchedFiles) Reset()                    { *m = DeveloperTouchedFiles{} }
func (m *DeveloperTouchedFiles) String() string            { return proto.CompactTextString(m) }
func (*DeveloperTouchedFiles) ProtoMessage()               {}
func (*DeveloperTouchedFiles) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{7} }

func (m *DeveloperTouchedFiles) GetDevelopers() []*TouchedFiles {
	if m != nil {
		return m.Developers
	}
	return nil
}

type CouplesAnalysisResults struct {
	FileCouples      *Couples               `protobuf:"bytes,6,opt,name=file_couples,json=fileCouples" json:"file_couples,omitempty"`
	DeveloperCouples *Couples               `protobuf:"bytes,7,opt,name=developer_couples,json=developerCouples" json:"developer_couples,omitempty"`
	TouchedFiles     *DeveloperTouchedFiles `protobuf:"bytes,8,opt,name=touched_files,json=touchedFiles" json:"touched_files,omitempty"`
}

func (m *CouplesAnalysisResults) Reset()                    { *m = CouplesAnalysisResults{} }
func (m *CouplesAnalysisResults) String() string            { return proto.CompactTextString(m) }
func (*CouplesAnalysisResults) ProtoMessage()               {}
func (*CouplesAnalysisResults) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{8} }

func (m *CouplesAnalysisResults) GetFileCouples() *Couples {
	if m != nil {
		return m.FileCouples
	}
	return nil
}

func (m *CouplesAnalysisResults) GetDeveloperCouples() *Couples {
	if m != nil {
		return m.DeveloperCouples
	}
	return nil
}

func (m *CouplesAnalysisResults) GetTouchedFiles() *DeveloperTouchedFiles {
	if m != nil {
		return m.TouchedFiles
	}
	return nil
}

type UASTChange struct {
	FileName   string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	SrcBefore  string `protobuf:"bytes,2,opt,name=src_before,json=srcBefore,proto3" json:"src_before,omitempty"`
	SrcAfter   string `protobuf:"bytes,3,opt,name=src_after,json=srcAfter,proto3" json:"src_after,omitempty"`
	UastBefore string `protobuf:"bytes,4,opt,name=uast_before,json=uastBefore,proto3" json:"uast_before,omitempty"`
	UastAfter  string `protobuf:"bytes,5,opt,name=uast_after,json=uastAfter,proto3" json:"uast_after,omitempty"`
}

func (m *UASTChange) Reset()                    { *m = UASTChange{} }
func (m *UASTChange) String() string            { return proto.CompactTextString(m) }
func (*UASTChange) ProtoMessage()               {}
func (*UASTChange) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{9} }

func (m *UASTChange) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UASTChange) GetSrcBefore() string {
	if m != nil {
		return m.SrcBefore
	}
	return ""
}

func (m *UASTChange) GetSrcAfter() string {
	if m != nil {
		return m.SrcAfter
	}
	return ""
}

func (m *UASTChange) GetUastBefore() string {
	if m != nil {
		return m.UastBefore
	}
	return ""
}

func (m *UASTChange) GetUastAfter() string {
	if m != nil {
		return m.UastAfter
	}
	return ""
}

type UASTChangesSaverResults struct {
	Changes []*UASTChange `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
}

func (m *UASTChangesSaverResults) Reset()                    { *m = UASTChangesSaverResults{} }
func (m *UASTChangesSaverResults) String() string            { return proto.CompactTextString(m) }
func (*UASTChangesSaverResults) ProtoMessage()               {}
func (*UASTChangesSaverResults) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{10} }

func (m *UASTChangesSaverResults) GetChanges() []*UASTChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type AnalysisResults struct {
	Header *Metadata `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// the mapped values are dynamic messages which require the second parsing pass.
	Contents map[string][]byte `protobuf:"bytes,2,rep,name=contents" json:"contents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AnalysisResults) Reset()                    { *m = AnalysisResults{} }
func (m *AnalysisResults) String() string            { return proto.CompactTextString(m) }
func (*AnalysisResults) ProtoMessage()               {}
func (*AnalysisResults) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{11} }

func (m *AnalysisResults) GetHeader() *Metadata {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AnalysisResults) GetContents() map[string][]byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func init() {
	proto.RegisterType((*Metadata)(nil), "Metadata")
	proto.RegisterType((*BurndownSparseMatrixRow)(nil), "BurndownSparseMatrixRow")
	proto.RegisterType((*BurndownSparseMatrix)(nil), "BurndownSparseMatrix")
	proto.RegisterType((*BurndownAnalysisResults)(nil), "BurndownAnalysisResults")
	proto.RegisterType((*CompressedSparseRowMatrix)(nil), "CompressedSparseRowMatrix")
	proto.RegisterType((*Couples)(nil), "Couples")
	proto.RegisterType((*TouchedFiles)(nil), "TouchedFiles")
	proto.RegisterType((*DeveloperTouchedFiles)(nil), "DeveloperTouchedFiles")
	proto.RegisterType((*CouplesAnalysisResults)(nil), "CouplesAnalysisResults")
	proto.RegisterType((*UASTChange)(nil), "UASTChange")
	proto.RegisterType((*UASTChangesSaverResults)(nil), "UASTChangesSaverResults")
	proto.RegisterType((*AnalysisResults)(nil), "AnalysisResults")
}

func init() { proto.RegisterFile("pb/pb.proto", fileDescriptorPb) }

var fileDescriptorPb = []byte{
	// 792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x05, 0x4d, 0x7d, 0x0e, 0xa5, 0x3a, 0x5e, 0x24, 0x8e, 0xea, 0x22, 0xa9, 0x4a, 0xa4, 0x85,
	0xd0, 0x34, 0x0c, 0xa0, 0xa0, 0x40, 0x91, 0x5c, 0xea, 0xa8, 0x0d, 0x90, 0x43, 0x5a, 0x60, 0xed,
	0x9c, 0x85, 0x15, 0xb9, 0xb2, 0xb7, 0x25, 0x77, 0x89, 0xdd, 0xa5, 0x65, 0xfd, 0xa0, 0x5e, 0x0a,
	0x14, 0x3d, 0xf4, 0xd4, 0x7f, 0x57, 0xec, 0x97, 0xa4, 0x08, 0xb2, 0xd1, 0x1b, 0xdf, 0xcc, 0x7b,
	0xc3, 0x79, 0x33, 0xcb, 0x25, 0x24, 0xf5, 0xe2, 0x65, 0xbd, 0xc8, 0x6a, 0x29, 0xb4, 0x48, 0xff,
	0x8c, 0xa0, 0xf7, 0x81, 0x6a, 0x52, 0x10, 0x4d, 0xd0, 0x08, 0xba, 0x37, 0x54, 0x2a, 0x26, 0xf8,
	0x28, 0x1a, 0x47, 0x93, 0x36, 0x0e, 0xd0, 0x64, 0xf2, 0xaa, 0x28, 0x19, 0xa7, 0xa3, 0xa3, 0x71,
	0x34, 0xe9, 0xe3, 0x00, 0xd1, 0x53, 0x00, 0x49, 0x6b, 0xa1, 0x98, 0x16, 0x72, 0x3d, 0x8a, 0x6d,
	0x72, 0x27, 0x82, 0xbe, 0x81, 0xe3, 0x05, 0xbd, 0x62, 0x7c, 0xde, 0x70, 0x76, 0x3b, 0xd7, 0xac,
	0xa2, 0xa3, 0xd6, 0x38, 0x9a, 0xc4, 0x78, 0x68, 0xc3, 0x1f, 0x39, 0xbb, 0xbd, 0x64, 0x15, 0x45,
	0x29, 0x0c, 0x29, 0x2f, 0x76, 0x58, 0x6d, 0xcb, 0x4a, 0x28, 0x2f, 0x02, 0x27, 0x7d, 0x05, 0x8f,
	0xdf, 0x36, 0x92, 0x17, 0x62, 0xc5, 0x2f, 0x6a, 0x22, 0x15, 0xfd, 0x40, 0xb4, 0x64, 0xb7, 0x58,
	0xac, 0x6c, 0x83, 0xa2, 0x6c, 0x2a, 0xae, 0x46, 0xd1, 0x38, 0x9e, 0x0c, 0x71, 0x80, 0xc6, 0xe1,
	0xc3, 0x43, 0x2a, 0x84, 0xa0, 0xc5, 0x49, 0x45, 0xad, 0xd5, 0x3e, 0xb6, 0xcf, 0xe8, 0x19, 0x7c,
	0xc6, 0x9b, 0x6a, 0x41, 0xe5, 0x5c, 0x2c, 0xe7, 0x52, 0xac, 0x94, 0xb5, 0xdb, 0xc6, 0x03, 0x17,
	0xfd, 0x75, 0x89, 0xc5, 0x4a, 0xa1, 0x6f, 0xe1, 0x64, 0xcb, 0x0a, 0xaf, 0x8d, 0x2d, 0xf1, 0x38,
	0x10, 0x67, 0x2e, 0x8c, 0xbe, 0x83, 0x96, 0xad, 0xd3, 0x1a, 0xc7, 0x93, 0x64, 0x3a, 0xca, 0xee,
	0x30, 0x80, 0x2d, 0x2b, 0xfd, 0xfb, 0x68, 0x6b, 0xf1, 0x9c, 0x93, 0x72, 0xad, 0x98, 0xc2, 0x54,
	0x35, 0xa5, 0x56, 0x68, 0x0c, 0xc9, 0x95, 0x24, 0xbc, 0x29, 0x89, 0x64, 0x7a, 0xed, 0x37, 0xb4,
	0x1b, 0x42, 0x67, 0xd0, 0x53, 0xa4, 0xaa, 0x4b, 0xc6, 0xaf, 0x7c, 0xdf, 0x1b, 0x8c, 0x5e, 0x42,
	0xb7, 0x96, 0xe2, 0x37, 0x9a, 0x6b, 0xdb, 0x69, 0x32, 0x7d, 0x74, 0xb8, 0x95, 0xc0, 0x42, 0xcf,
	0xa1, 0xbd, 0x64, 0x25, 0x0d, 0x9d, 0xdf, 0x41, 0x77, 0x1c, 0xf4, 0x02, 0x3a, 0x35, 0x15, 0x75,
	0x69, 0xd6, 0x76, 0x0f, 0xdb, 0x93, 0xd0, 0x7b, 0x40, 0xee, 0x69, 0xce, 0xb8, 0xa6, 0x92, 0xe4,
	0xda, 0x9c, 0xb9, 0x8e, 0xed, 0xeb, 0x2c, 0x9b, 0x89, 0xaa, 0x96, 0x54, 0x29, 0x5a, 0x38, 0x31,
	0x16, 0x2b, 0xaf, 0x3f, 0x71, 0xaa, 0xf7, 0x5b, 0x51, 0xfa, 0x4f, 0x04, 0x9f, 0xdf, 0x29, 0x38,
	0xb0, 0xcf, 0xe8, 0xff, 0xee, 0xf3, 0xe8, 0xf0, 0x3e, 0x11, 0xb4, 0xcc, 0xb7, 0x32, 0x8a, 0xc7,
	0xf1, 0x24, 0xc6, 0xad, 0xf0, 0xdd, 0x30, 0x5e, 0xb0, 0xdc, 0x0f, 0xab, 0x8d, 0x03, 0x44, 0xa7,
	0xd0, 0x61, 0xbc, 0xa8, 0xb5, 0xb4, 0x73, 0x89, 0xb1, 0x47, 0xe9, 0x05, 0x74, 0x67, 0xa2, 0xa9,
	0xcd, 0xe8, 0x1e, 0x42, 0x9b, 0xf1, 0x82, 0xde, 0xda, 0x73, 0xdb, 0xc7, 0x0e, 0xa0, 0x29, 0x74,
	0x2a, 0x6b, 0xc1, 0xf6, 0x71, 0xff, 0x54, 0x3c, 0x33, 0x7d, 0x06, 0x83, 0x4b, 0xd1, 0xe4, 0xd7,
	0xb4, 0x78, 0xc7, 0x7c, 0x65, 0xb7, 0xc1, 0xc8, 0x36, 0xe5, 0x40, 0xfa, 0x0e, 0x1e, 0xfd, 0x44,
	0x6f, 0x68, 0x29, 0x6a, 0x2a, 0x3f, 0xa1, 0xbf, 0x00, 0x28, 0x42, 0xc2, 0x69, 0x92, 0xe9, 0x30,
	0xdb, 0xa5, 0xe0, 0x1d, 0x42, 0xfa, 0x6f, 0x04, 0xa7, 0xde, 0xc3, 0xfe, 0x49, 0x7d, 0x0e, 0x03,
	0xf3, 0xae, 0x79, 0xee, 0xd2, 0x7e, 0xb1, 0xbd, 0xcc, 0xd3, 0x71, 0x62, 0xb2, 0xc1, 0xff, 0xf7,
	0x70, 0xb2, 0xa9, 0xba, 0x51, 0x74, 0xf7, 0x14, 0x0f, 0x36, 0x94, 0x20, 0x7b, 0x03, 0x43, 0xed,
	0x5a, 0x9b, 0x3b, 0x93, 0x3d, 0x2b, 0x39, 0xcd, 0x0e, 0x9a, 0xc3, 0x03, 0xbd, 0x83, 0xd2, 0x3f,
	0x22, 0x80, 0x8f, 0xe7, 0x17, 0x97, 0xb3, 0x6b, 0xc2, 0xaf, 0x28, 0xfa, 0x02, 0xfa, 0xb6, 0xdf,
	0x9d, 0xeb, 0xa0, 0x67, 0x02, 0xbf, 0x98, 0x2b, 0xe1, 0x09, 0x80, 0x92, 0xf9, 0x7c, 0x41, 0x97,
	0x42, 0x86, 0xdb, 0xaf, 0xaf, 0x64, 0xfe, 0xd6, 0x06, 0x8c, 0xd6, 0xa4, 0xc9, 0x52, 0x53, 0xe9,
	0xaf, 0xbf, 0x9e, 0x92, 0xf9, 0xb9, 0xc1, 0xe8, 0x4b, 0x48, 0x1a, 0xa2, 0x74, 0x10, 0xb7, 0xdc,
	0xed, 0x68, 0x42, 0x5e, 0xfd, 0x04, 0x2c, 0xf2, 0xf2, 0xb6, 0x2b, 0x6e, 0x22, 0x56, 0x9f, 0xfe,
	0x08, 0x8f, 0xb7, 0x6d, 0xaa, 0x0b, 0x72, 0x43, 0x65, 0x98, 0xf1, 0xd7, 0xd0, 0xcd, 0x5d, 0xd8,
	0xaf, 0x2a, 0xc9, 0xb6, 0x54, 0x1c, 0x72, 0xe9, 0x5f, 0x11, 0x1c, 0xef, 0xaf, 0xe7, 0x2b, 0xe8,
	0x5c, 0x53, 0x52, 0x50, 0x69, 0xbd, 0x26, 0xd3, 0x7e, 0x16, 0xfe, 0x00, 0xd8, 0x27, 0xd0, 0x6b,
	0xe8, 0xe5, 0x82, 0x6b, 0xca, 0xb5, 0xf9, 0x10, 0x4c, 0xf9, 0xa7, 0xd9, 0x5e, 0x99, 0x6c, 0xe6,
	0x09, 0x3f, 0x73, 0x2d, 0xd7, 0x78, 0xc3, 0x3f, 0x7b, 0x03, 0xc3, 0x4f, 0x52, 0xe8, 0x01, 0xc4,
	0xbf, 0xd3, 0xb5, 0x1f, 0xac, 0x79, 0x34, 0x27, 0xf3, 0x86, 0x94, 0x8d, 0x1b, 0xe7, 0x00, 0x3b,
	0xf0, 0xfa, 0xe8, 0x87, 0x68, 0xd1, 0xb1, 0xbf, 0xa5, 0x57, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0xc6, 0xe6, 0x63, 0x11, 0xa5, 0x06, 0x00, 0x00,
}
